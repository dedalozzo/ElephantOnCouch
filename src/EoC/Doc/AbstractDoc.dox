<?php


namespace EoC\Doc;


class AbstractDoc {

  protected $meta = []; //!< Metadata array.

  /** @name Properties */
  //!@{

  string $id; //!< Document identifier. Mandatory and immutable.
  string $rev; //!< The current MVCC-token/revision of this document. Mandatory and immutable.

  //!@}


  /**
   * @brief Removes tha path from the document identifier, because CouchDB returns it for local and design documents.
   * @details Both LocalDoc and DesignDoc override this method.
   */
  abstract protected function fixDocId();


  /**
   * @brief Resets the metadata.
   */
  public function resetMetadata() {}


  /**
   * @brief Returns the metadata.
   * @retval mixed
   */
  public function getMetadata($name) {}


  /**
   * @brief Checks the document for the given attribute.
   * @retval bool
   */
  public function isMetadataPresent($name) {}


  /**
   * @brief Sets the metadata to the provided value.
   * @param[in] string $name The metadata name.
   * @param[in] mixed $value The metadata value.
   * @param[in] bool $override When `true` overrides the metadata value.
   * @param[in] bool $allowNull When `true` allows a `null` value.
   */
  public function setMetadata($name, $value, $override = TRUE, $allowNull = TRUE) {}


  /**
   * @brief Removes an metadata previously set.
   * @param[in] string $name The metadata name.
   */
  public function unsetMetadata($name) {}


  /**
   * @brief Given a JSON object, this function assigns every single object's property to the `$meta` array, the array
   * that stores the document's metadata.
   * @param[in] string $json A JSON object.
   */
  public function assignJson($json) {}

  /**
   * @brief Assigns the given associative array to the `$meta` array, the array that stores the document's metadata.
   * @param[in] array $array An associative array.
   */
  public function assignArray(array $array) {}


  /**
   * @brief Given an instance of a standard class, this function assigns every single object's property to the `$meta`
   * array, the array that stores the document's metadata.
   */
  public function assignObject(\stdClass $object) {}


  /**
   * @brief Marks the document as deleted. To be effected the document must be saved.
   */
  public function delete() {}

  /**
   * @brief Indicates that this document has been deleted and previous revisions will be removed on next compaction run.
   */
  public function isDeleted() {}


  /**
   * @brief Gets the document revisions.
   */
  public function getRevisions() {}


  /**
   * @brief This implementation returns `false`.
   * @retval bool
   */
  public function hasType() {}


  /**
   * @brief Returns the object type.
   * @retval string
   */
  public function getType() {}

}